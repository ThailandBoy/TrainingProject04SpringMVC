Данный проект построен по паттерну проектирования MVC
1. подключение зависимостей
2. настройка и подключение томкат
    среда разработки создаст артефакт для деплоя
    jar - обычные java проекты
    war - формат файлов для веб проектов на java
    war exploded - позволит производить горячую замену статических элементов в нашем веб приложении
    Application context лучше оставить пустым, иначе в URL будем видеть эту строку.
3. Реализуем web.xml -  этот файл считывает сервер. Когда сервер считает этот файл, в этом файле мы можем описать
    то что мы хотим чтобы сервер делал.
    - В данном случае мы хотим чтобы сервер, все HTTP запросы от пользователей перенаправлял на DispatcherServlet
    Запрос => Сервер -> DispatcherServlet -> Controller
    В данном проекте мы будем конфигурировать сервер с помощью web.xml - этот способ все еще используется хоть и
    устарел.
    Загрузи настройку для web.xml с https://gist.github.com/NeilAlishev/95e31c1d4ece78113693c8cb3a103ded
    загрузи настройку для контекста с https://gist.github.com/NeilAlishev/c495348293cb6b8d5df0b239d6349345
    - Дальнейшее описание в файле web.xml
    - Дальнейшее описание в файле applicationContextMVC.xml
4. Создание компонентов: контроллер, представление(view)
    Создаем папку java в мейн, отмечаем как source root
    Cоздаем пакет ru.spring.example
    Создаем контроллер HelloController.java - Дальнейшее описание там
5. Сейчас заменим   web.xml на Java класс,
                    applicationContextMVC.xml на Java класс
    Чтобы проект был полностью на java
    -   Создаем папку config в ru.spring.example
    -   В ней создаем MySpringDispatcherServletInit.java, далее описание там
    -   В этой же папке создаем SpringConfig.java, https://gist.github.com/NeilAlishev/11642fd955e22f4bf435ea43b32e0ddb
        далее описание там
    -   Обратно в MySpringDispatcherServletInit.java который заменяет web.xml. Здесь подставим недостающие вещи в
        методы. - описание там
    -   Подключаем зависимость для работы абстрактного метода AbstractAnnotationConfigDispatcherServletInitializer
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>5.0.0</version>
            <scope>provided</scope>
        </dependency>
    -   удаление applicationContextMVC.xml, он заменяется классом SpringConfig.java (перенес в папку forOldXMLconfig)
    -   удаление web.xml, он заменяется классом MySpringDispatcherServletInit (перенес в папку forOldXMLconfig)
    -   пришлось использовать старое API для работы приложения, в будущем нужно без этого запустить
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>

Про контроллеры - @Controller
1. Создать папку controller
2. Создать контроллер FirstController - описание там
3. Создадим ссылку драг на друга в представлениях goodByePage и helloPage.
    <a href="></a>
4. Создал SecondController, папку second/exit, и представление exit.html
5. Работа с "Модель".
    Данные в приложении передаются в контейнерах, которые называются Модель.
    HTML форма -> Контролер -> Представление
                     ||
                 База данных (туда обратно)
6. С помощью шаблонизатора thymeleaf будем отображать данные из модели в формате ключ-значение.
7. В параметрах метода контроллера, пишем модель и спринг автоматически внедряет эту модель.
8. Далее в файле FirstController

Урок 21 Алишев спринг. В этом уроке реализованно 2 метода в контроллере
    - список из людей
    - человека по id
1. PeopleController













