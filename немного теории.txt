Данный проект построен по паттерну проектирования MVC
Model View Controller
    Model - логика работы с данными
    View - логика представления, интерфейс
    Controller - логика навигации, обработка запросов.

    Из View -> Controller -> Model (DataBase)
        Model(DataBase) -> Controller -> View

    Controller - логика навигации, обработка запросов. Когда клиент будет через браузер заходить в наше приложение
        и будет совершать HTTP запрос в наше приложение, его запрос в первую очередь будет попадать в наш контроллер.
        В контроллере мы будем отправлять данные в Model, получать данные из Model, отвечать на запросы View, получать
        запросы View. В controller так же есть DispatcherServlet.
        - DispatcherServlet это входная точка в Spring MVC приложение, он уже реализован. Только использовать.
        - DispatcherServlet первый встречает HTTP запрос клиента и передает его правильному контроллеру
    Запрос приходит на сервер -> от сервера в Spring MVC приложение -> в спринге запрос попадает в DispatcherServlet ->
    DispatcherServlet отправляет в правильный контроллер

    Model - логика работы с данными. Компонент Model отвечает за работу с данными и работой с базой данных.
    View - данный компонент отвечает за отображение данных для пользователя. Для динамического отображения используются
        шаблонизаторы (Thymeleaf, Freemarker, Velocity). // Будем использовать Thymeleaf

Spring MVC приложение состоит из java классов с аннотациями,, Spring конфиги xml-java-аннотации.

Модуль Controller работает с java классами, аннотациями, передает данные в Model, View
Например @Controller, класс отмеченный данной аннотацией дает возможность обрабатывать поступающие HTTP запросы
от пользователя.
Модуль Model работает с java классами, аннотациями, базой данных. Передает данные в Controller.
Модуль View работает с  HTML, JavaScript, CSS. Передает запросы в Controller.

Spring MVC приложение конфигурируется как простое Spring приложение. Ну и конфиги на вкус и цвет.

Про контроллеры - @Controller
Запрос пользователя идет к диспатчеру -> контроллеру -> модели, от модели обратно -> контролеру -> view для
    отображения пользователю.
Класс контролер, должен быть отмечен аннотацией @Controller - данная аннотация наследуется от @Component.
    -   Поэтому аннотация @ComponentScan работает с @Controller так же, как и с @Component
    -   @Controller это тот же @Component, только с дополнительными возможностями.
    -   Методы в контроллере помечаются аннотацией @GetMapping("/hello-world"), @PostMapping(), @PutMapping(),
    @DeleteMapping(), @PatchMapping(), @RequestMapping(method = RequestMethod.GET) но это устаревший вариант.
    Эти методы вызываются согласно запросу от пользователя и значению аннотации, тоесть если пользователь ввел в URL
    localhost:8080/hello-world, диспатчер обработает запрос, отправит его в контролер, контролер найдет аннотацию
    с "/hello-world" и выполнит метод отмеченный данной аннотацией.
    -   Если метод возвращает представление, то он возвращает String. В ином случае JSON или другие структуры данных,
    которые будут приниматься другим приложением.
    -   Метод можно назвать как угодно, но лучше называть по названию запроса.
    -   Это виды HTTP запросов: @GetMapping(), @PostMapping(), @PutMapping(), @DeleteMapping(),
    @PatchMapping(), @RequestMapping(method = RequestMethod.GET)
    -   Аннотация @RequestMapping("/hyper") которым отмечается класс, означает что все маппинги в классе, будут иметь
    /hyper перед своим запросом. Тоесть:
        @Controller
        @RequestMapping("/hyper")
        public class HelloController {
            @GetMapping("/hello-world")
            public String sayHello(){
                return "hello_world";
            }
        }
    В URL запросе будет не "localhost:8080/hello-world" а "localhost:8080/hyper/hello-world"
    @RequestMapping("") в классе применяется весьма часто.

    GET запросы - для переходов по ссылке. Передает свои параметоры в URL.
    POST запросы - для отправки данных с формы на сервер, загрузки данных и т.д.
        Передает параметры/данные в теле запроса.
